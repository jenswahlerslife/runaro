import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import { Plus, Users, Copy, Check, MapPin, Settings } from 'lucide-react';
import { toast } from 'sonner';

interface League {
  id: string;
  name: string;
  description: string;
  invite_code: string;
  creator_id: string;
  created_at: string;
}

const Leagues = () => {
  const { user } = useAuth();
  const [leagues, setLeagues] = useState<League[]>([]);
  const [selectedLeague, setSelectedLeague] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [joinDialogOpen, setJoinDialogOpen] = useState(false);
  const [newLeagueName, setNewLeagueName] = useState('');
  const [newLeagueDescription, setNewLeagueDescription] = useState('');
  const [joinCode, setJoinCode] = useState('');
  const [error, setError] = useState('');
  const [copiedCode, setCopiedCode] = useState<string | null>(null);

  useEffect(() => {
    if (user) {
      loadLeagues();
    }
  }, [user]);

  const loadLeagues = async () => {
    try {
      // Get user's profile ID first
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('id')
        .eq('user_id', user?.id)
        .maybeSingle();

      if (profileError) throw profileError;
      if (!profile) {
        setLeagues([]);
        setLoading(false);
        return;
      }

      // Get leagues where user is a member
      const { data: memberships, error: membershipError } = await supabase
        .from('league_memberships')
        .select('league_id')
        .eq('user_id', profile.id);

      if (membershipError) throw membershipError;

      if (memberships && memberships.length > 0) {
        const leagueIds = memberships.map(m => m.league_id);
        
        const { data: leaguesData, error: leaguesError } = await supabase
          .from('leagues')
          .select('*')
          .in('id', leagueIds)
          .order('created_at', { ascending: false });

        if (leaguesError) throw leaguesError;
        setLeagues(leaguesData || []);
      } else {
        setLeagues([]);
      }
    } catch (error) {
      console.error('Error loading leagues:', error);
      setError('Failed to load leagues');
    } finally {
      setLoading(false);
    }
  };

  const createLeague = async () => {
    if (!newLeagueName.trim()) {
      setError('League name is required');
      return;
    }

    setError('');
    try {
      // Get user's profile ID first
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('id')
        .eq('user_id', user?.id)
        .maybeSingle();

      if (profileError) {
        throw profileError;
      }

      if (!profile) {
        throw new Error('User profile not found. Please refresh and try again.');
      }

      // Create league (invite_code is auto-generated by trigger)
      const { data: league, error: leagueError } = await supabase
        .from('leagues')
        .insert({
          name: newLeagueName,
          description: newLeagueDescription,
          creator_id: profile.id,
          invite_code: '', // Will be auto-generated by trigger
        })
        .select()
        .single();

      if (leagueError) throw leagueError;

      // Add creator as member
      const { error: membershipError } = await supabase
        .from('league_memberships')
        .insert({
          league_id: league.id,
          user_id: profile.id, // Use profile.id instead of user?.id
        });

      if (membershipError) throw membershipError;

      toast.success('League created successfully!');
      setCreateDialogOpen(false);
      setNewLeagueName('');
      setNewLeagueDescription('');
      loadLeagues();
    } catch (error: any) {
      console.error('Error creating league:', error);
      setError(error.message || 'Failed to create league');
    }
  };

  const joinLeague = async () => {
    if (!joinCode.trim()) {
      setError('Invite code is required');
      return;
    }

    setError('');
    try {
      // Get user's profile ID first
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('id')
        .eq('user_id', user?.id)
        .maybeSingle();

      if (profileError) throw profileError;
      if (!profile) {
        throw new Error('User profile not found. Please refresh and try again.');
      }

      // Find league by invite code
      const { data: league, error: leagueError } = await supabase
        .from('leagues')
        .select('id, name')
        .eq('invite_code', joinCode.trim().toUpperCase())
        .maybeSingle();

      if (leagueError) throw leagueError;
      if (!league) {
        setError('Invalid invite code');
        return;
      }

      // Check if already a member
      const { data: existingMembership } = await supabase
        .from('league_memberships')
        .select('id')
        .eq('league_id', league.id)
        .eq('user_id', profile.id)
        .maybeSingle();

      if (existingMembership) {
        setError('You are already a member of this league');
        return;
      }

      // Join league
      const { error: membershipError } = await supabase
        .from('league_memberships')
        .insert({
          league_id: league.id,
          user_id: profile.id,
        });

      if (membershipError) throw membershipError;

      toast.success(`Joined ${league.name} successfully!`);
      setJoinDialogOpen(false);
      setJoinCode('');
      loadLeagues();
    } catch (error: any) {
      console.error('Error joining league:', error);
      setError(error.message || 'Failed to join league');
    }
  };

  const copyInviteCode = async (code: string) => {
    try {
      await navigator.clipboard.writeText(code);
      setCopiedCode(code);
      toast.success('Invite code copied to clipboard!');
      setTimeout(() => setCopiedCode(null), 2000);
    } catch (error) {
      toast.error('Failed to copy invite code');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background to-muted">
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Indlæser ligaer...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-muted">
      <div className="container mx-auto px-6 py-8 max-w-6xl">
        {/* Header Section */}
        <div className="mb-8">
          <div className="flex items-center gap-4 mb-6">
            <div className="p-3 rounded-xl bg-primary text-primary-foreground">
              <Users className="h-8 w-8" />
            </div>
            <div>
              <h1 className="text-4xl font-bold text-foreground">
                Ligaer
              </h1>
              <p className="text-lg text-muted-foreground mt-1">
                Administrer dine ligaer og vælg din aktive liga
              </p>
            </div>
          </div>
        </div>

        {/* Active League Selection */}
        {leagues.length > 0 && (
          <div className="mb-8">
            <Card className="border">
              <CardHeader>
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-primary text-primary-foreground">
                    <MapPin className="h-5 w-5" />
                  </div>
                  <div>
                    <CardTitle className="text-xl">Aktiv Liga</CardTitle>
                    <CardDescription>
                      Vælg hvilken liga dine aktiviteter skal tilhøre
                    </CardDescription>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="league-select" className="font-medium">
                    Vælg Aktiv Liga
                  </Label>
                  <Select value={selectedLeague} onValueChange={setSelectedLeague}>
                    <SelectTrigger className="h-12">
                      <SelectValue placeholder="Vælg en liga" />
                    </SelectTrigger>
                    <SelectContent>
                      {leagues.map(league => (
                        <SelectItem key={league.id} value={league.id}>
                          <div className="flex items-center gap-2">
                            <div className="w-3 h-3 rounded-full bg-primary"></div>
                            <span>{league.name}</span>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  {selectedLeague && (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <p className="text-green-800 font-medium text-sm">
                        ✅ {leagues.find(l => l.id === selectedLeague)?.name} er nu din aktive liga
                      </p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* League Management Section */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-foreground">Dine Ligaer</h2>
            <div className="flex gap-3">
              <Dialog open={joinDialogOpen} onOpenChange={setJoinDialogOpen}>
                <DialogTrigger asChild>
                  <Button variant="outline">
                    <Users className="h-4 w-4 mr-2" />
                    Tilslut Liga
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Tilslut en Liga</DialogTitle>
                    <DialogDescription>
                      Indtast invitationskoden for at tilslutte dig en eksisterende liga
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="join-code">Invitationskode</Label>
                      <Input
                        id="join-code"
                        placeholder="Indtast invitationskode"
                        value={joinCode}
                        onChange={(e) => setJoinCode(e.target.value)}
                      />
                    </div>
                    {error && (
                      <Alert>
                        <AlertDescription>{error}</AlertDescription>
                      </Alert>
                    )}
                    <Button onClick={joinLeague} className="w-full">
                      Tilslut Liga
                    </Button>
                  </div>
                </DialogContent>
              </Dialog>

              <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    Opret Liga
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Opret Ny Liga</DialogTitle>
                    <DialogDescription>
                      Opret en privat liga til konkurrence med dine venner
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="league-name">Liga Navn</Label>
                      <Input
                        id="league-name"
                        placeholder="Indtast liga navn"
                        value={newLeagueName}
                        onChange={(e) => setNewLeagueName(e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="league-description">Beskrivelse (valgfri)</Label>
                      <Input
                        id="league-description"
                        placeholder="Beskriv din liga"
                        value={newLeagueDescription}
                        onChange={(e) => setNewLeagueDescription(e.target.value)}
                      />
                    </div>
                    {error && (
                      <Alert>
                        <AlertDescription>{error}</AlertDescription>
                      </Alert>
                    )}
                    <Button onClick={createLeague} className="w-full">
                      Opret Liga
                    </Button>
                  </div>
                </DialogContent>
              </Dialog>
            </div>
          </div>

          {leagues.length === 0 ? (
            <Card className="border">
              <CardContent className="p-12">
                <div className="text-center space-y-6">
                  <div className="p-4 rounded-xl bg-muted w-fit mx-auto">
                    <Users className="h-12 w-12 text-muted-foreground" />
                  </div>
                  <div>
                    <h3 className="font-bold text-xl text-foreground mb-2">Ingen ligaer endnu</h3>
                    <p className="text-muted-foreground">
                      Opret din første liga eller tilslut dig en med en invitationskode
                    </p>
                  </div>
                  <div className="flex justify-center gap-3">
                    <Button onClick={() => setCreateDialogOpen(true)}>
                      <Plus className="h-4 w-4 mr-2" />
                      Opret Liga
                    </Button>
                    <Button variant="outline" onClick={() => setJoinDialogOpen(true)}>
                      <Users className="h-4 w-4 mr-2" />
                      Tilslut Liga
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {leagues.map((league) => (
                <Card key={league.id} className="border">
                  <CardHeader className="pb-4">
                    <div className="flex items-center justify-between mb-2">
                      <CardTitle className="text-lg">{league.name}</CardTitle>
                      <Badge 
                        variant="outline" 
                        className="cursor-pointer hover:bg-muted"
                        onClick={() => copyInviteCode(league.invite_code)}
                      >
                        {copiedCode === league.invite_code ? (
                          <Check className="h-3 w-3 mr-1" />
                        ) : (
                          <Copy className="h-3 w-3 mr-1" />
                        )}
                        {league.invite_code}
                      </Badge>
                    </div>
                    {league.description && (
                      <CardDescription>{league.description}</CardDescription>
                    )}
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <p className="text-sm text-muted-foreground">
                      Oprettet {new Date(league.created_at).toLocaleDateString('da-DK')}
                    </p>
                    <div className="flex justify-between items-center gap-2">
                      <Button variant="outline" size="sm" className="flex-1">
                        <MapPin className="h-4 w-4 mr-2" />
                        Se Kort
                      </Button>
                      <Button variant="outline" size="sm">
                        <Settings className="h-4 w-4" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Leagues;